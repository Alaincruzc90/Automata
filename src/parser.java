
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import application.classobject.*;
import application.method.*;
import application.enums.*;
import application.assignment.*;
import application.assignment.math.*;
import application.variables.*;
import application.condition.*;
import application.component.*;
import application.symboltable.Variable;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\010\000\002\002\004\000\002\002" +
    "\007\000\002\012\004\000\002\012\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\013\003\000\002\013\003\000\002" +
    "\015\011\000\002\014\007\000\002\007\006\000\002\007" +
    "\004\000\002\007\003\000\002\005\005\000\002\010\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\002\000" +
    "\002\006\007\000\002\011\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\005\000\002\011\004\000\002\011\003" +
    "\000\002\011\004\000\002\011\004\000\002\011\003\000" +
    "\002\011\003\000\002\024\013\000\002\024\012\000\002" +
    "\023\011\000\002\023\010\000\002\023\010\000\002\023" +
    "\007\000\002\030\006\000\002\030\005\000\002\025\007" +
    "\000\002\025\006\000\002\031\005\000\002\031\007\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\004\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\020\006" +
    "\000\002\020\006\000\002\020\005\000\002\020\004\000" +
    "\002\020\007\000\002\020\002\000\002\021\005\000\002" +
    "\021\007\000\002\021\005\000\002\046\003\000\002\046" +
    "\003\000\002\022\010\000\002\034\005\000\002\034\005" +
    "\000\002\034\003\000\002\036\005\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\026\005\000\002" +
    "\047\006\000\002\047\010\000\002\047\007\000\002\050" +
    "\003\000\002\035\005\000\002\035\005\000\002\027\005" +
    "\000\002\027\005\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\041\003\000\002\042\003\000" +
    "\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\004\035\005\001\002\000\004\002\302\001" +
    "\002\000\004\046\006\001\002\000\004\105\007\001\002" +
    "\000\004\066\010\001\002\000\020\015\014\021\013\034" +
    "\022\067\016\077\020\100\012\104\021\001\002\000\020" +
    "\015\ufffc\021\ufffc\034\ufffc\067\ufffc\077\ufffc\100\ufffc\104" +
    "\ufffc\001\002\000\020\015\ufff8\021\ufff8\034\ufff8\067\ufff8" +
    "\077\ufff8\100\ufff8\104\ufff8\001\002\000\004\105\274\001" +
    "\002\000\004\042\241\001\002\000\020\015\ufff7\021\ufff7" +
    "\034\ufff7\067\ufff7\077\ufff7\100\ufff7\104\ufff7\001\002\000" +
    "\004\002\uffff\001\002\000\020\015\014\021\013\034\022" +
    "\067\237\077\020\100\012\104\021\001\002\000\020\015" +
    "\ufffa\021\ufffa\034\ufffa\067\ufffa\077\ufffa\100\ufffa\104\ufffa" +
    "\001\002\000\020\015\ufff9\021\ufff9\034\ufff9\067\ufff9\077" +
    "\ufff9\100\ufff9\104\ufff9\001\002\000\004\105\026\001\002" +
    "\000\020\015\ufff6\021\ufff6\034\ufff6\067\ufff6\077\ufff6\100" +
    "\ufff6\104\ufff6\001\002\000\020\015\ufffb\021\ufffb\034\ufffb" +
    "\067\ufffb\077\ufffb\100\ufffb\104\ufffb\001\002\000\020\015" +
    "\ufffd\021\ufffd\034\ufffd\067\ufffd\077\ufffd\100\ufffd\104\ufffd" +
    "\001\002\000\004\030\027\001\002\000\024\004\033\005" +
    "\041\006\037\007\042\010\030\011\035\012\032\017\031" +
    "\027\036\001\002\000\006\066\uffa3\105\uffa3\001\002\000" +
    "\006\037\ufff1\066\ufff1\001\002\000\006\066\uffa1\105\uffa1" +
    "\001\002\000\006\066\uffa7\105\uffa7\001\002\000\004\066" +
    "\046\001\002\000\006\066\uffa2\105\uffa2\001\002\000\006" +
    "\066\uffa0\105\uffa0\001\002\000\006\066\uffa5\105\uffa5\001" +
    "\002\000\004\105\043\001\002\000\006\066\uffa6\105\uffa6" +
    "\001\002\000\006\066\uffa4\105\uffa4\001\002\000\010\037" +
    "\ufff2\066\ufff2\076\044\001\002\000\024\004\033\005\041" +
    "\006\037\007\042\010\030\011\035\012\032\017\031\027" +
    "\036\001\002\000\006\037\ufff3\066\ufff3\001\002\000\026" +
    "\013\052\015\014\020\071\022\060\032\064\036\050\037" +
    "\054\044\053\067\uffec\105\055\001\002\000\020\015\ufff4" +
    "\021\ufff4\034\ufff4\067\ufff4\077\ufff4\100\ufff4\104\ufff4\001" +
    "\002\000\004\105\235\001\002\000\004\075\233\001\002" +
    "\000\004\105\223\001\002\000\022\013\052\061\131\063" +
    "\125\071\135\101\072\102\100\103\104\105\124\001\002" +
    "\000\022\013\052\061\102\063\076\071\135\101\072\102" +
    "\100\103\104\105\103\001\002\000\010\024\204\031\205" +
    "\074\203\001\002\000\024\013\052\020\071\022\060\032" +
    "\064\036\050\037\054\044\053\067\uffee\105\055\001\002" +
    "\000\004\067\201\001\002\000\022\013\052\061\131\063" +
    "\125\071\135\101\072\102\100\103\104\105\124\001\002" +
    "\000\024\013\052\020\071\022\060\032\064\036\050\037" +
    "\054\044\053\067\uffdf\105\055\001\002\000\024\013\052" +
    "\020\071\022\060\032\064\036\050\037\054\044\053\067" +
    "\uffe7\105\055\001\002\000\024\013\052\020\071\022\060" +
    "\032\064\036\050\037\054\044\053\067\uffe5\105\055\001" +
    "\002\000\016\061\102\063\076\101\072\102\100\103\104" +
    "\105\103\001\002\000\004\067\uffed\001\002\000\004\067" +
    "\uffe2\001\002\000\024\013\052\020\071\022\060\032\064" +
    "\036\050\037\054\044\053\067\uffe9\105\055\001\002\000" +
    "\024\013\052\020\071\022\060\032\064\036\050\037\054" +
    "\044\053\067\uffde\105\055\001\002\000\016\061\102\063" +
    "\076\101\072\102\100\103\104\105\103\001\002\000\066" +
    "\013\uff9f\020\uff9f\022\uff9f\023\uff9f\032\uff9f\036\uff9f\037" +
    "\uff9f\041\uff9f\044\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\062" +
    "\uff9f\066\uff9f\067\uff9f\070\uff9f\074\uff9f\075\uff9f\105\uff9f" +
    "\001\002\000\066\013\uffaa\020\uffaa\022\uffaa\023\uffaa\032" +
    "\uffaa\036\uffaa\037\uffaa\041\uffaa\044\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\060\uffaa\062\uffaa\066\uffaa\067\uffaa\070\uffaa\074\uffaa" +
    "\075\uffaa\105\uffaa\001\002\000\066\013\uffa8\020\uffa8\022" +
    "\uffa8\023\uffa8\032\uffa8\036\uffa8\037\uffa8\041\uffa8\044\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\062\uffa8\066\uffa8\067\uffa8" +
    "\070\uffa8\074\uffa8\075\uffa8\105\uffa8\001\002\000\004\041" +
    "\105\001\002\000\066\013\uffbf\020\uffbf\022\uffbf\023\uffbf" +
    "\032\uffbf\036\uffbf\037\uffbf\041\uffbf\044\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\062\uffbf\066\uffbf\067\uffbf\070\uffbf\074" +
    "\uffbf\075\uffbf\105\uffbf\001\002\000\066\013\uffab\020\uffab" +
    "\022\uffab\023\uffab\032\uffab\036\uffab\037\uffab\041\uffab\044" +
    "\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab" +
    "\055\uffab\056\uffab\057\uffab\060\uffab\062\uffab\066\uffab\067" +
    "\uffab\070\uffab\074\uffab\075\uffab\105\uffab\001\002\000\066" +
    "\013\uff9e\020\uff9e\022\uff9e\023\uff9e\032\uff9e\036\uff9e\037" +
    "\uff9e\041\uff9e\044\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\062" +
    "\uff9e\066\uff9e\067\uff9e\070\uff9e\074\uff9e\075\uff9e\105\uff9e" +
    "\001\002\000\066\013\uffac\020\uffac\022\uffac\023\uffac\032" +
    "\uffac\036\uffac\037\uffac\041\uffac\044\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057" +
    "\uffac\060\uffac\062\uffac\066\uffac\067\uffac\070\uffac\074\uffac" +
    "\075\uffac\105\uffac\001\002\000\066\013\uffbe\020\uffbe\022" +
    "\uffbe\023\uffbe\032\uffbe\036\uffbe\037\uffbe\041\uffbe\044\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\062\uffbe\066\uffbe\067\uffbe" +
    "\070\uffbe\074\uffbe\075\uffbe\105\uffbe\001\002\000\066\013" +
    "\uffa9\020\uffa9\022\uffa9\023\uffa9\032\uffa9\036\uffa9\037\uffa9" +
    "\041\uffa9\044\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\062\uffa9" +
    "\066\uffa9\067\uffa9\070\uffa9\074\uffa9\075\uffa9\105\uffa9\001" +
    "\002\000\066\013\uff9d\020\uff9d\022\uff9d\023\uff9d\032\uff9d" +
    "\036\uff9d\037\uff9d\041\uff9d\044\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\060\uff9d\062\uff9d\066\uff9d\067\uff9d\070\uff9d\074\uff9d\075" +
    "\uff9d\105\uff9d\001\002\000\016\061\102\063\076\101\072" +
    "\102\100\103\104\105\103\001\002\000\004\023\107\001" +
    "\002\000\016\061\102\063\076\101\072\102\100\103\104" +
    "\105\103\001\002\000\004\066\111\001\002\000\024\013" +
    "\052\020\071\022\060\032\064\036\050\037\054\044\053" +
    "\067\112\105\055\001\002\000\024\013\uffdc\020\uffdc\022" +
    "\uffdc\032\uffdc\036\uffdc\037\uffdc\044\uffdc\067\uffdc\105\uffdc" +
    "\001\002\000\004\067\114\001\002\000\024\013\uffdd\020" +
    "\uffdd\022\uffdd\032\uffdd\036\uffdd\037\uffdd\044\uffdd\067\uffdd" +
    "\105\uffdd\001\002\000\004\067\uffe1\001\002\000\004\067" +
    "\uffea\001\002\000\004\075\120\001\002\000\024\013\uffae" +
    "\020\uffae\022\uffae\032\uffae\036\uffae\037\uffae\044\uffae\067" +
    "\uffae\105\uffae\001\002\000\004\067\uffe6\001\002\000\004" +
    "\067\uffe8\001\002\000\004\067\uffe0\001\002\000\034\031" +
    "\175\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\060\uffa9\062\uffd1\066\uffd1\001" +
    "\002\000\032\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\062\uffd0\066" +
    "\uffd0\001\002\000\016\053\164\054\166\055\172\056\170" +
    "\057\167\060\165\001\002\000\040\047\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\062\uffb7\066\uffb7\070\uffb7\074\uffb7\075\uffb7\001" +
    "\002\000\040\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\062\uffb8\066" +
    "\uffb8\070\uffb8\074\uffb8\075\uffb8\001\002\000\032\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\062\uffcf\066\uffcf\001\002\000\004" +
    "\062\150\001\002\000\040\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\062\uffb6\066\uffb6\070\uffb6\074\uffb6\075\uffb6\001\002\000" +
    "\040\047\141\050\140\051\143\052\142\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\062\uffba\066\uffba\070" +
    "\uffba\074\uffba\075\uffba\001\002\000\022\013\052\061\102" +
    "\063\076\071\135\101\072\102\100\103\104\105\103\001" +
    "\002\000\004\070\137\001\002\000\040\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\062\uffb9\066\uffb9\070\uffb9\074\uffb9\075\uffb9" +
    "\001\002\000\022\013\052\061\102\063\076\071\135\101" +
    "\072\102\100\103\104\105\103\001\002\000\022\013\052" +
    "\061\102\063\076\071\135\101\072\102\100\103\104\105" +
    "\103\001\002\000\004\101\072\001\002\000\004\101\072" +
    "\001\002\000\040\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\062\uffaf" +
    "\066\uffaf\070\uffaf\074\uffaf\075\uffaf\001\002\000\040\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\062\uffb0\066\uffb0\070\uffb0\074" +
    "\uffb0\075\uffb0\001\002\000\030\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\060\uffbc\062\uffbc\066\uffbc\070\uffbc\074" +
    "\uffbc\075\uffbc\001\002\000\030\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\062\uffbb\066\uffbb\070\uffbb\074" +
    "\uffbb\075\uffbb\001\002\000\004\066\151\001\002\000\024" +
    "\013\052\020\071\022\060\032\064\036\050\037\054\044" +
    "\053\067\152\105\055\001\002\000\026\013\uffd8\016\155" +
    "\020\uffd8\022\uffd8\032\uffd8\036\uffd8\037\uffd8\044\uffd8\067" +
    "\uffd8\105\uffd8\001\002\000\004\067\154\001\002\000\026" +
    "\013\uffda\016\155\020\uffda\022\uffda\032\uffda\036\uffda\037" +
    "\uffda\044\uffda\067\uffda\105\uffda\001\002\000\004\066\157" +
    "\001\002\000\024\013\uffdb\020\uffdb\022\uffdb\032\uffdb\036" +
    "\uffdb\037\uffdb\044\uffdb\067\uffdb\105\uffdb\001\002\000\024" +
    "\013\052\020\071\022\060\032\064\036\050\037\054\044" +
    "\053\067\160\105\055\001\002\000\024\013\uffd6\020\uffd6" +
    "\022\uffd6\032\uffd6\036\uffd6\037\uffd6\044\uffd6\067\uffd6\105" +
    "\uffd6\001\002\000\004\067\162\001\002\000\024\013\uffd7" +
    "\020\uffd7\022\uffd7\032\uffd7\036\uffd7\037\uffd7\044\uffd7\067" +
    "\uffd7\105\uffd7\001\002\000\024\013\uffd9\020\uffd9\022\uffd9" +
    "\032\uffd9\036\uffd9\037\uffd9\044\uffd9\067\uffd9\105\uffd9\001" +
    "\002\000\022\013\uffce\061\uffce\063\uffce\071\uffce\101\uffce" +
    "\102\uffce\103\uffce\105\uffce\001\002\000\004\053\174\001" +
    "\002\000\022\013\uffcc\061\uffcc\063\uffcc\071\uffcc\101\uffcc" +
    "\102\uffcc\103\uffcc\105\uffcc\001\002\000\022\013\uffc9\061" +
    "\uffc9\063\uffc9\071\uffc9\101\uffc9\102\uffc9\103\uffc9\105\uffc9" +
    "\001\002\000\022\013\uffcb\061\uffcb\063\uffcb\071\uffcb\101" +
    "\uffcb\102\uffcb\103\uffcb\105\uffcb\001\002\000\022\013\052" +
    "\061\102\063\076\071\135\101\072\102\100\103\104\105" +
    "\103\001\002\000\022\013\uffca\061\uffca\063\uffca\071\uffca" +
    "\101\uffca\102\uffca\103\uffca\105\uffca\001\002\000\006\062" +
    "\uffd3\066\uffd3\001\002\000\022\013\uffcd\061\uffcd\063\uffcd" +
    "\071\uffcd\101\uffcd\102\uffcd\103\uffcd\105\uffcd\001\002\000" +
    "\022\013\052\061\102\063\076\071\135\101\072\102\100" +
    "\103\104\105\103\001\002\000\016\053\164\054\166\055" +
    "\172\056\170\057\167\060\165\001\002\000\022\013\052" +
    "\061\102\063\076\071\135\101\072\102\100\103\104\105" +
    "\103\001\002\000\006\062\uffd2\066\uffd2\001\002\000\020" +
    "\015\ufff0\021\ufff0\034\ufff0\067\ufff0\077\ufff0\100\ufff0\104" +
    "\ufff0\001\002\000\004\067\uffef\001\002\000\022\013\052" +
    "\061\102\063\076\071\135\101\072\102\100\103\104\105" +
    "\103\001\002\000\022\013\052\061\102\063\076\071\135" +
    "\101\072\102\100\103\104\105\103\001\002\000\022\013" +
    "\052\061\102\063\076\071\135\101\072\102\100\103\104" +
    "\105\103\001\002\000\004\074\207\001\002\000\022\013" +
    "\052\061\102\063\076\071\135\101\072\102\100\103\104" +
    "\105\103\001\002\000\004\075\uffc1\001\002\000\004\075" +
    "\uffc0\001\002\000\004\075\uffc2\001\002\000\004\075\uffb1" +
    "\001\002\000\004\075\215\001\002\000\004\067\uffb5\001" +
    "\002\000\004\066\217\001\002\000\024\013\052\020\071" +
    "\022\060\032\064\036\050\037\054\044\053\067\220\105" +
    "\055\001\002\000\024\013\uffd4\020\uffd4\022\uffd4\032\uffd4" +
    "\036\uffd4\037\uffd4\044\uffd4\067\uffd4\105\uffd4\001\002\000" +
    "\004\067\222\001\002\000\024\013\uffd5\020\uffd5\022\uffd5" +
    "\032\uffd5\036\uffd5\037\uffd5\044\uffd5\067\uffd5\105\uffd5\001" +
    "\002\000\004\045\224\001\002\000\022\017\225\061\102" +
    "\063\076\071\227\101\072\102\100\103\104\105\103\001" +
    "\002\000\004\075\232\001\002\000\062\013\uffb4\020\uffb4" +
    "\022\uffb4\032\uffb4\036\uffb4\037\uffb4\044\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\062\uffb4\066\uffb4\067\uffb4\070\uffb4\074" +
    "\uffb4\075\uffb4\105\uffb4\001\002\000\022\013\052\061\102" +
    "\063\076\071\135\101\072\102\100\103\104\105\103\001" +
    "\002\000\004\070\231\001\002\000\062\013\uffb3\020\uffb3" +
    "\022\uffb3\032\uffb3\036\uffb3\037\uffb3\044\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\062\uffb3\066\uffb3\067\uffb3\070\uffb3\074" +
    "\uffb3\075\uffb3\105\uffb3\001\002\000\062\013\uffb2\020\uffb2" +
    "\022\uffb2\032\uffb2\036\uffb2\037\uffb2\044\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\057\uffb2\060\uffb2\062\uffb2\066\uffb2\067\uffb2\070\uffb2\074" +
    "\uffb2\075\uffb2\105\uffb2\001\002\000\024\013\052\020\071" +
    "\022\060\032\064\036\050\037\054\044\053\067\uffe3\105" +
    "\055\001\002\000\004\067\uffe4\001\002\000\004\075\236" +
    "\001\002\000\024\013\uffad\020\uffad\022\uffad\032\uffad\036" +
    "\uffad\037\uffad\044\uffad\067\uffad\105\uffad\001\002\000\004" +
    "\002\001\001\002\000\020\015\ufffe\021\ufffe\034\ufffe\067" +
    "\ufffe\077\ufffe\100\ufffe\104\ufffe\001\002\000\004\066\242" +
    "\001\002\000\026\004\033\005\041\006\037\007\042\010" +
    "\030\011\035\012\244\027\246\067\uffc3\105\055\001\002" +
    "\000\004\075\272\001\002\000\024\004\033\005\041\006" +
    "\037\007\042\010\030\011\035\012\032\027\036\105\uffa1" +
    "\001\002\000\004\067\264\001\002\000\024\004\033\005" +
    "\041\006\037\007\042\010\030\011\035\012\032\027\036" +
    "\105\uffa0\001\002\000\004\105\253\001\002\000\026\004" +
    "\033\005\041\006\037\007\042\010\030\011\035\012\244" +
    "\027\246\067\uffc3\105\055\001\002\000\004\067\uffc5\001" +
    "\002\000\004\075\256\001\002\000\012\024\204\031\205" +
    "\074\203\075\254\001\002\000\026\004\033\005\041\006" +
    "\037\007\042\010\030\011\035\012\244\027\246\067\uffc3" +
    "\105\055\001\002\000\004\067\uffc7\001\002\000\026\004" +
    "\033\005\041\006\037\007\042\010\030\011\035\012\244" +
    "\027\246\067\uffc3\105\055\001\002\000\004\067\uffc8\001" +
    "\002\000\004\105\261\001\002\000\004\075\262\001\002" +
    "\000\026\004\033\005\041\006\037\007\042\010\030\011" +
    "\035\012\244\027\246\067\uffc3\105\055\001\002\000\004" +
    "\067\uffc4\001\002\000\040\013\uffeb\015\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\032\uffeb\034\uffeb\036\uffeb\037\uffeb\044\uffeb" +
    "\067\uffeb\077\uffeb\100\uffeb\104\uffeb\105\uffeb\001\002\000" +
    "\004\105\266\001\002\000\004\040\267\001\002\000\022" +
    "\013\052\061\102\063\076\071\135\101\072\102\100\103" +
    "\104\105\103\001\002\000\004\075\271\001\002\000\026" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\027\uffbd\067\uffbd\105\uffbd\001\002\000\026\004\033" +
    "\005\041\006\037\007\042\010\030\011\035\012\244\027" +
    "\246\067\uffc3\105\055\001\002\000\004\067\uffc6\001\002" +
    "\000\004\030\275\001\002\000\024\004\033\005\041\006" +
    "\037\007\042\010\030\011\035\012\032\017\031\027\036" +
    "\001\002\000\004\037\277\001\002\000\022\004\033\005" +
    "\041\006\037\007\042\010\030\011\035\012\032\027\036" +
    "\001\002\000\004\066\046\001\002\000\020\015\ufff5\021" +
    "\ufff5\034\ufff5\067\ufff5\077\ufff5\100\ufff5\104\ufff5\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\024\006\023\012\016\013\010\014\022\015\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\237\006\023\013\010\014\022\015\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\033\017\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\044\017" +
    "\037\001\001\000\002\001\001\000\026\006\055\010\056" +
    "\011\064\021\050\023\061\024\066\025\062\026\065\027" +
    "\060\047\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\031\215\033" +
    "\127\034\125\035\126\036\133\041\100\042\076\043\072" +
    "\046\073\047\132\001\001\000\026\033\127\034\212\035" +
    "\126\036\133\041\100\042\076\043\072\046\073\047\132" +
    "\050\213\001\001\000\002\001\001\000\022\011\201\021" +
    "\050\023\061\024\066\025\062\026\065\027\060\047\067" +
    "\001\001\000\002\001\001\000\026\031\131\033\127\034" +
    "\125\035\126\036\133\041\100\042\076\043\072\046\073" +
    "\047\132\001\001\000\022\011\122\021\050\023\061\024" +
    "\066\025\062\026\065\027\060\047\067\001\001\000\022" +
    "\011\121\021\050\023\061\024\066\025\062\026\065\027" +
    "\060\047\067\001\001\000\022\011\120\021\050\023\061" +
    "\024\066\025\062\026\065\027\060\047\067\001\001\000" +
    "\014\033\116\041\100\042\076\043\072\046\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\011\115\021" +
    "\050\023\061\024\066\025\062\026\065\027\060\047\067" +
    "\001\001\000\022\011\114\021\050\023\061\024\066\025" +
    "\062\026\065\027\060\047\067\001\001\000\014\033\074" +
    "\041\100\042\076\043\072\046\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\105\041\100\042\076\043\072\046" +
    "\073\001\001\000\002\001\001\000\014\033\107\041\100" +
    "\042\076\043\072\046\073\001\001\000\002\001\001\000" +
    "\022\011\112\021\050\023\061\024\066\025\062\026\065" +
    "\027\060\047\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\033\127\034\135\035" +
    "\126\036\133\041\100\042\076\043\072\046\073\047\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\033" +
    "\127\034\146\035\126\036\133\041\100\042\076\043\072" +
    "\046\073\047\132\001\001\000\024\033\127\034\145\035" +
    "\126\036\133\041\100\042\076\043\072\046\073\047\132" +
    "\001\001\000\004\041\144\001\001\000\004\041\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\011\152\021" +
    "\050\023\061\024\066\025\062\026\065\027\060\047\067" +
    "\001\001\000\004\030\162\001\001\000\002\001\001\000" +
    "\004\030\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\011\160\021\050\023\061\024\066\025\062\026" +
    "\065\027\060\047\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\033\127\034\172\035\126\036" +
    "\133\041\100\042\076\043\072\046\073\047\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\033\127\034\175\035\126\036\133\041\100\042\076" +
    "\043\072\046\073\047\132\001\001\000\004\032\176\001" +
    "\001\000\024\033\127\034\177\035\126\036\133\041\100" +
    "\042\076\043\072\046\073\047\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\033\127" +
    "\034\211\035\126\036\133\041\100\042\076\043\072\046" +
    "\073\047\132\001\001\000\024\033\127\034\210\035\126" +
    "\036\133\041\100\042\076\043\072\046\073\047\132\001" +
    "\001\000\024\033\127\034\205\035\126\036\133\041\100" +
    "\042\076\043\072\046\073\047\132\001\001\000\002\001" +
    "\001\000\024\033\127\034\207\035\126\036\133\041\100" +
    "\042\076\043\072\046\073\047\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\011\220\021\050\023\061\024\066\025\062\026\065" +
    "\027\060\047\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\033\225" +
    "\041\100\042\076\043\072\046\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\033\127\034\227\035\126" +
    "\036\133\041\100\042\076\043\072\046\073\047\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\011\233\021\050\023\061\024\066\025\062\026" +
    "\065\027\060\047\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\246\020\244\021\242" +
    "\022\247\001\001\000\002\001\001\000\004\017\264\001" +
    "\001\000\002\001\001\000\004\017\257\001\001\000\004" +
    "\021\251\001\001\000\012\017\246\020\250\021\242\022" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\246\020\254\021\242\022\247\001" +
    "\001\000\002\001\001\000\012\017\246\020\256\021\242" +
    "\022\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\246\020\262\021\242\022\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\033\127\034\267\035\126" +
    "\036\133\041\100\042\076\043\072\046\073\047\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\246" +
    "\020\272\021\242\022\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\275\017\037\001\001\000\002" +
    "\001\001\000\004\017\277\001\001\000\004\005\300\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // class_def ::= PUBLIC CLASS_DEF IDENTIFIER CODE_BLOCK_START expr_list CODE_BLOCK_END 
            {
              ClassObject RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassObjectBlock o = (ClassObjectBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassObject(o.getGlobalVariables(), o.getMethods(), s);
		   RESULT.fillSymbolTable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_def",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= class_def EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassObject start_val = (ClassObject)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_def ::= PUBLIC CLASS_DEF IDENTIFIER CODE_BLOCK_START CODE_BLOCK_END 
            {
              ClassObject RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ClassObject(null, null, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_def",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr_list expr_part 
            {
              ClassObjectBlock RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassObjectBlock c = (ClassObjectBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (o instanceof Method) {
                        c.getMethods().add((Method) o);
                    } else {
                        RESULT.setGlobalVariables((Set<VarStructure>) o);
                    }
                    RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_list ::= expr_part 
            {
              ClassObjectBlock RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ClassObjectBlock();
                if (o instanceof Method) {
                    RESULT.getMethods().add((Method)o);
                } else {
                    RESULT.setGlobalVariables((Set<VarStructure>) o);
                }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_part ::= method 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method o = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_part ::= var_block 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> v = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_part ::= DESTROYER_IDENTIFY 
            {
              Object RESULT =null;
		 System.out.println("Identificador del destructor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_part ::= ERRORS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("->Error léxico: " + s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr_part ::= EXIT 
            {
              Object RESULT =null;
		 System.out.println("-> Fin del programa"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method ::= func 
            {
              Method RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method f = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method ::= proc 
            {
              Method RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method p = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func ::= FUNC IDENTIFIER PARAMS params RETURN var_type method_block 
            {
              Method RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Set<VarStructure> p = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarType vt = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodBlock v = (MethodBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Func(i, p, v.getLocalVariables(), v.getComponents(), MethodType.FUNC, null, vt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proc ::= PROC IDENTIFIER PARAMS params method_block 
            {
              Method RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Set<VarStructure> p = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodBlock v = (MethodBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Method(i, p, v.getLocalVariables(), v.getComponents(), MethodType.PROC, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // params ::= var_type IDENTIFIER COMMA params 
            {
              Set<VarStructure> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarType s = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(new VarDeclaration(DeclarationType.DECLARATION, i, s));
		RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // params ::= var_type IDENTIFIER 
            {
              Set<VarStructure> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarType s = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new HashSet<>();
		RESULT.add(new VarDeclaration(DeclarationType.DECLARATION, i, s));
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // params ::= EMPTY 
            {
              Set<VarStructure> RESULT =null;
		
		RESULT = new HashSet<>();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_block ::= CODE_BLOCK_START method_inst CODE_BLOCK_END 
            {
              MethodBlock RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodBlock m = (MethodBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_inst ::= var_block inst_block 
            {
              MethodBlock RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Set<VarStructure> v = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> i = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodBlock(v, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_inst ::= var_block 
            {
              MethodBlock RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> v = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodBlock(v, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_inst ::= inst_block 
            {
              MethodBlock RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> i = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodBlock(null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method_inst ::= 
            {
              MethodBlock RESULT =null;
		 RESULT = new MethodBlock(null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_block ::= DEFINE VAR CODE_BLOCK_START var_def CODE_BLOCK_END 
            {
              Set<VarStructure> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_block",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inst_block ::= for inst_block 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> c = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(s);
		RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inst_block ::= for 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new LinkedList<>();
		RESULT.add(s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inst_block ::= if inst_block 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> c = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(s);
        RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inst_block ::= if 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new LinkedList<>();
        RESULT.add(s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inst_block ::= while inst_block 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> c = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(s);
        RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inst_block ::= while 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new LinkedList<>();
        RESULT.add(s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inst_block ::= var_assig EOL inst_block 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarAssignment s = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> c = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(new VarAssignmentComponent(ComponentType.ASSIGNMENT, s.getIdentifierName(), s.getAssignment()));
		RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inst_block ::= var_assig EOL 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarAssignment s = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 RESULT = new LinkedList<>();
         RESULT.add(new VarAssignmentComponent(ComponentType.ASSIGNMENT, s.getIdentifierName(), s.getAssignment()));
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inst_block ::= return 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new LinkedList<>();
        RESULT.add(s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inst_block ::= call inst_block 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> c = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        c.add((Component)s);
        RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inst_block ::= io_oper inst_block 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> c = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(s);
        RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inst_block ::= io_oper 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new LinkedList<>();
        RESULT.add(s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inst_block ::= call 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add((Component)s);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for ::= FOR term TO term INCREASE term CODE_BLOCK_START inst_block CODE_BLOCK_END 
            {
              Component RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Component> i = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		Assignment actual, maxValue, stripe;

		if(n1 instanceof Float) {
		    actual = new ValueAssignment<Integer>(Math.round((Float)n1));
		} else {
		    actual = (IdentifierAssignment)n1;
		}

		if(n2 instanceof Float) {
            maxValue = new ValueAssignment<Integer>(Math.round((Float)n2));
        } else {
            maxValue = (IdentifierAssignment)n2;
        }

        if(n3 instanceof Float) {
            stripe = new ValueAssignment<Integer>(Math.round((Float)n3));
        } else {
            stripe = (IdentifierAssignment)n3;
        }

		RESULT = new For(ComponentType.FOR, i, maxValue, stripe, actual);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // for ::= FOR term TO term INCREASE term CODE_BLOCK_START CODE_BLOCK_END 
            {
              Component RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

		Assignment actual, maxValue, stripe;

        if(n1 instanceof Float) {
            actual = new ValueAssignment<Integer>(Math.round((Float)n1));
        } else {
            actual = (IdentifierAssignment)n1;
        }

        if(n2 instanceof Float) {
               maxValue = new ValueAssignment<Integer>(Math.round((Float)n2));
        } else {
               maxValue = (IdentifierAssignment)n2;
        }

        if(n3 instanceof Float) {
              stripe = new ValueAssignment<Integer>(Math.round((Float)n3));
        } else {
              stripe = (IdentifierAssignment)n3;
        }

        RESULT = new For(ComponentType.FOR, null, maxValue, stripe, actual);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if ::= IF conditional THEN CODE_BLOCK_START inst_block CODE_BLOCK_END else 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Component> i = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component e = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(ComponentType.IF, i, c, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if ::= IF conditional THEN CODE_BLOCK_START inst_block CODE_BLOCK_END 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Component> i = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(ComponentType.IF, i, c, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if ::= IF conditional THEN CODE_BLOCK_START CODE_BLOCK_END else 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component e = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(ComponentType.IF, null, c, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if ::= IF conditional THEN CODE_BLOCK_START CODE_BLOCK_END 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new If(ComponentType.IF, null, c, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // else ::= ELSE CODE_BLOCK_START inst_block CODE_BLOCK_END 
            {
              Component RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Component> s = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Else(ComponentType.ELSE, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // else ::= ELSE CODE_BLOCK_START CODE_BLOCK_END 
            {
              Component RESULT =null;
		 RESULT = new Else(ComponentType.ELSE, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // while ::= WHILE conditional CODE_BLOCK_START inst_block CODE_BLOCK_END 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Component> s = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(ComponentType.WHILE, s, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // while ::= WHILE conditional CODE_BLOCK_START CODE_BLOCK_END 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new While(ComponentType.WHILE, null, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // conditional ::= math_expr cond_type math_expr 
            {
              Condition RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ComparatorType c = (ComparatorType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Condition(s, v, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // conditional ::= IDENTIFIER POS math_expr cond_type math_expr 
            {
              Condition RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ComparatorType c = (ComparatorType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Condition(new ArrayAssignment(null, i, s), v, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // conditional ::= IDENTIFIER 
            {
              Condition RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Condition(new IdentifierAssignment(i), new ValueAssignment<Boolean>(true), ComparatorType.EQUALS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conditional ::= TRUE 
            {
              Condition RESULT =null;
		 RESULT = new Condition(new ValueAssignment<Boolean>(true), new ValueAssignment<Boolean>(true), ComparatorType.EQUALS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // conditional ::= FALSE 
            {
              Condition RESULT =null;
		 RESULT = new Condition(new ValueAssignment<Boolean>(false), new ValueAssignment<Boolean>(false), ComparatorType.EQUALS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond_type ::= EQUALS 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.EQUALS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond_type ::= NOT EQUALS 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.NOT_EQUALS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cond_type ::= GREATER_THAN 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.GREATER_THAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cond_type ::= SMALLER_THAN 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.LESS_THAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cond_type ::= GREATER_THAN_EQUALS 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.GREATER_THAN_EQUALS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cond_type ::= SMALLER_THAN_EQUALS 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.LESS_THAN_EQUALS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // var_def ::= var_type var_assig EOL var_def 
            {
              Set<VarStructure> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarType s = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarAssignment v = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		VarDeclarationAssignment decla = new VarDeclarationAssignment(DeclarationType.DECLARATION_ASSIGNMENT, v.getIdentifierName(), s, v);
		if (c.contains(decla)) {
		    throw new Exception("Variable ya declarada " + decla.getIdentifierName());
		}
		c.add(decla);
		RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var_def ::= var_type IDENTIFIER EOL var_def 
            {
              Set<VarStructure> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarType s = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		VarDeclaration decla = new VarDeclaration(DeclarationType.DECLARATION, i, s);
		if (c.contains(decla)) {
            throw new Exception("Variable ya declarada " + decla.getIdentifierName());
        }
		 c.add(decla);
         RESULT = c;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var_def ::= var_assig EOL var_def 
            {
              Set<VarStructure> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarAssignment v = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        c.add(v);
        RESULT = c;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var_def ::= array_def var_def 
            {
              Set<VarStructure> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarStructure s = (VarStructure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(s);
		RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // var_def ::= LIST var_type IDENTIFIER EOL var_def 
            {
              Set<VarStructure> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarType v = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        VarDeclaration decla = new VarDeclaration(DeclarationType.DECLARATION, i, VarType.LIST);
        if (c.contains(decla)) {
             throw new Exception("Variable ya declarada " + decla.getIdentifierName());
         }
         c.add(decla);
          RESULT = c;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // var_def ::= 
            {
              Set<VarStructure> RESULT =null;
		
        RESULT = new LinkedHashSet<VarStructure>();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var_assig ::= IDENTIFIER ASSIGNMENT math_expr 
            {
              VarAssignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarAssignment(DeclarationType.ASSIGNMENT, i, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var_assig ::= IDENTIFIER POS math_expr ASSIGNMENT math_expr 
            {
              VarAssignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment m = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarAssignment(DeclarationType.ASSIGNMENT, i, new ArrayAssignment(v, i, m)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // var_assig ::= IDENTIFIER INSERT math_expr 
            {
              VarAssignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment m = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarAssignment(DeclarationType.ASSIGNMENT, i, m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tof ::= TRUE 
            {
              ValueAssignment<Boolean> RESULT =null;
		 RESULT = new ValueAssignment<Boolean>(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tof",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tof ::= FALSE 
            {
              ValueAssignment<Boolean> RESULT =null;
		 RESULT = new ValueAssignment<Boolean>(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tof",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // array_def ::= ARRAY var_type IDENTIFIER SIZE math_expr EOL 
            {
              VarStructure RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarType v = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayDeclaration(DeclarationType.DECLARATION, i, VarType.ARRAY, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_def",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // math_expr ::= math_part SUM math_expr 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sum(s, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // math_expr ::= math_part SUBTRACTION math_expr 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(s, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // math_expr ::= math_part 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // math_part ::= PARENTHESIS_LEFT math_expr PARENTHESIS_RIGHT 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MathAux(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_part",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // math_part ::= term 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(s instanceof IdentifierAssignment) {
		    RESULT = (IdentifierAssignment)s;
		} else if(s instanceof String) {
		    RESULT = new ValueAssignment<String>((String)s);
		} else if(s instanceof Double) {
		    RESULT = new ValueAssignment<Double>((Double)s);
		} else if(s instanceof Integer) {
		    RESULT = new ValueAssignment<Integer>((Integer)s);
		} else if(s instanceof Float) {
            RESULT = new ValueAssignment<Float>((Float)s);
        }
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_part",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // math_part ::= factor 
            {
              Assignment RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment f = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_part",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // math_part ::= call 
            {
              Assignment RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment c = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_part",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // return ::= RETURN return_exp EOL 
            {
              Component RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Return(ComponentType.RETURN, s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // call ::= CALL IDENTIFIER WITH term 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		    Assignment assignment = null;
		    if(t instanceof IdentifierAssignment) {
                assignment = (IdentifierAssignment)t;
            } else if(t instanceof String) {
                assignment = new ValueAssignment<String>((String)t);
            } else if(t instanceof Double) {
                assignment = new ValueAssignment<Double>((Double)t);
            } else if(t instanceof Integer) {
                assignment = new ValueAssignment<Integer>((Integer)t);
            } else if(t instanceof Float) {
                assignment = new ValueAssignment<Float>((Float)t);
            }
		    RESULT = new Call(ComponentType.CALL, assignment, s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // call ::= CALL IDENTIFIER WITH PARENTHESIS_LEFT math_expr PARENTHESIS_RIGHT 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 RESULT = new Call(ComponentType.CALL, s, i);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // call ::= CALL IDENTIFIER WITH EMPTY EOL 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Call(ComponentType.CALL, null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // return_exp ::= math_expr 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_exp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= math_part MULTIPLICATION num 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 if(!(v instanceof Double)) throw new Exception("Can't parse " + v + " to Double.");
         		RESULT =  new Mul((Assignment)s, new ValueAssignment<Double>((Double)v));
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= math_part DIVISION num 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(!(v instanceof Double)) throw new Exception("Can't parse " + v + " to Double.");
		RESULT =  new Div((Assignment)s, new ValueAssignment<Double>((Double)v));
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // io_oper ::= PRINT term EOL 
            {
              Component RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		    if(s instanceof String) {
		        ValueAssignment<String> value = new ValueAssignment<String>((String) s);
		        RESULT = new Print(ComponentType.PRINT, value);
		    } else if(s instanceof IdentifierAssignment) {
		        RESULT = new Print(ComponentType.PRINT, (IdentifierAssignment)s);
		    } else {
		        RESULT = new Print(ComponentType.PRINT, new ValueAssignment<String>((String) s));
		    }
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_oper",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // io_oper ::= READ IDENTIFIER EOL 
            {
              Component RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Read(ComponentType.READ, new IdentifierAssignment(s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_oper",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // term ::= num 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // term ::= quote_marks 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // term ::= simple_quote 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // term ::= IDENTIFIER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierAssignment(s.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // term ::= tof 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // var_type ::= BOOLEAN 
            {
              VarType RESULT =null;
		 RESULT = VarType.BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // var_type ::= CHAR 
            {
              VarType RESULT =null;
		 RESULT = VarType.CHAR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // var_type ::= DOUBLE 
            {
              VarType RESULT =null;
		 RESULT = VarType.DOUBLE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // var_type ::= FLOAT 
            {
              VarType RESULT =null;
		 RESULT = VarType.FLOAT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // var_type ::= INT 
            {
              VarType RESULT =null;
		 RESULT = VarType.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // var_type ::= STRING 
            {
              VarType RESULT =null;
		 RESULT = VarType.STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // var_type ::= ARRAY 
            {
              VarType RESULT =null;
		 RESULT = VarType.ARRAY; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // var_type ::= LIST 
            {
              VarType RESULT =null;
		 RESULT = VarType.LIST; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // num ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // quote_marks ::= QUOTATION_MARKS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quote_marks",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // simple_quote ::= SIMPLE_QUOTATION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_quote",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
