
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import application.classobject.*;
import application.method.*;
import application.enums.*;
import application.assignment.*;
import application.assignment.math.*;
import application.variables.*;
import application.condition.*;
import application.component.*;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\010\000\002\002\004\000\002\002" +
    "\007\000\002\012\004\000\002\012\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\013\003\000\002\013\003\000\002" +
    "\015\011\000\002\014\007\000\002\007\006\000\002\007" +
    "\004\000\002\007\003\000\002\005\005\000\002\010\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\002\000" +
    "\002\006\007\000\002\011\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\005\000\002\011\004\000\002\011\003" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\024\013\000\002\024\012\000\002\023\011\000\002" +
    "\023\010\000\002\023\010\000\002\023\007\000\002\030" +
    "\006\000\002\030\005\000\002\025\007\000\002\025\006" +
    "\000\002\031\005\000\002\031\007\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\003\000\002" +
    "\032\004\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\020\006\000\002\020\006" +
    "\000\002\020\005\000\002\020\004\000\002\020\002\000" +
    "\002\021\005\000\002\021\007\000\002\021\005\000\002" +
    "\046\003\000\002\046\003\000\002\045\003\000\002\045" +
    "\005\000\002\022\007\000\002\022\006\000\002\034\005" +
    "\000\002\034\005\000\002\034\003\000\002\036\005\000" +
    "\002\036\003\000\002\036\003\000\002\026\005\000\002" +
    "\047\006\000\002\050\003\000\002\050\003\000\002\050" +
    "\005\000\002\050\005\000\002\035\005\000\002\035\005" +
    "\000\002\027\005\000\002\027\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\037\004\000\002\037\004\000\002\040" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\041" +
    "\003\000\002\042\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\035\005\001\002\000\004\002\312\001" +
    "\002\000\004\046\006\001\002\000\004\105\007\001\002" +
    "\000\004\066\010\001\002\000\020\015\014\021\013\034" +
    "\022\067\016\077\020\100\012\104\021\001\002\000\020" +
    "\015\ufffc\021\ufffc\034\ufffc\067\ufffc\077\ufffc\100\ufffc\104" +
    "\ufffc\001\002\000\020\015\ufff8\021\ufff8\034\ufff8\067\ufff8" +
    "\077\ufff8\100\ufff8\104\ufff8\001\002\000\004\105\304\001" +
    "\002\000\004\042\247\001\002\000\020\015\ufff7\021\ufff7" +
    "\034\ufff7\067\ufff7\077\ufff7\100\ufff7\104\ufff7\001\002\000" +
    "\004\002\uffff\001\002\000\020\015\014\021\013\034\022" +
    "\067\245\077\020\100\012\104\021\001\002\000\020\015" +
    "\ufffa\021\ufffa\034\ufffa\067\ufffa\077\ufffa\100\ufffa\104\ufffa" +
    "\001\002\000\020\015\ufff9\021\ufff9\034\ufff9\067\ufff9\077" +
    "\ufff9\100\ufff9\104\ufff9\001\002\000\004\105\026\001\002" +
    "\000\020\015\ufff6\021\ufff6\034\ufff6\067\ufff6\077\ufff6\100" +
    "\ufff6\104\ufff6\001\002\000\020\015\ufffb\021\ufffb\034\ufffb" +
    "\067\ufffb\077\ufffb\100\ufffb\104\ufffb\001\002\000\020\015" +
    "\ufffd\021\ufffd\034\ufffd\067\ufffd\077\ufffd\100\ufffd\104\ufffd" +
    "\001\002\000\004\030\027\001\002\000\024\004\033\005" +
    "\041\006\037\007\042\010\030\011\035\012\032\017\031" +
    "\027\036\001\002\000\006\066\uff9f\105\uff9f\001\002\000" +
    "\006\037\ufff1\066\ufff1\001\002\000\006\066\uff9d\105\uff9d" +
    "\001\002\000\006\066\uffa3\105\uffa3\001\002\000\004\066" +
    "\046\001\002\000\006\066\uff9e\105\uff9e\001\002\000\006" +
    "\066\uff9c\105\uff9c\001\002\000\006\066\uffa1\105\uffa1\001" +
    "\002\000\004\105\043\001\002\000\006\066\uffa2\105\uffa2" +
    "\001\002\000\006\066\uffa0\105\uffa0\001\002\000\010\037" +
    "\ufff2\066\ufff2\076\044\001\002\000\024\004\033\005\041" +
    "\006\037\007\042\010\030\011\035\012\032\017\031\027" +
    "\036\001\002\000\006\037\ufff3\066\ufff3\001\002\000\026" +
    "\013\052\015\014\020\071\022\060\032\064\036\050\037" +
    "\054\044\053\067\uffec\105\055\001\002\000\020\015\ufff4" +
    "\021\ufff4\034\ufff4\067\ufff4\077\ufff4\100\ufff4\104\ufff4\001" +
    "\002\000\004\105\243\001\002\000\004\075\241\001\002" +
    "\000\004\105\236\001\002\000\020\061\130\063\126\071" +
    "\133\101\072\102\100\103\104\105\132\001\002\000\022" +
    "\013\052\061\102\063\076\071\133\101\072\102\100\103" +
    "\104\105\103\001\002\000\010\024\212\031\213\074\211" +
    "\001\002\000\024\013\052\020\071\022\060\032\064\036" +
    "\050\037\054\044\053\067\uffee\105\055\001\002\000\004" +
    "\067\207\001\002\000\020\061\130\063\126\071\133\101" +
    "\072\102\100\103\104\105\132\001\002\000\024\013\052" +
    "\020\071\022\060\032\064\036\050\037\054\044\053\067" +
    "\uffdf\105\055\001\002\000\024\013\052\020\071\022\060" +
    "\032\064\036\050\037\054\044\053\067\uffe7\105\055\001" +
    "\002\000\024\013\052\020\071\022\060\032\064\036\050" +
    "\037\054\044\053\067\uffe5\105\055\001\002\000\016\061" +
    "\102\063\076\101\072\102\100\103\104\105\103\001\002" +
    "\000\004\067\uffed\001\002\000\004\067\uffe2\001\002\000" +
    "\024\013\052\020\071\022\060\032\064\036\050\037\054" +
    "\044\053\067\uffe9\105\055\001\002\000\004\067\uffe1\001" +
    "\002\000\016\061\102\063\076\101\072\102\100\103\104" +
    "\105\103\001\002\000\046\023\uff97\041\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\060\uff97\062\uff97\066\uff97\067\uff97\070\uff97\074" +
    "\uff97\075\uff97\001\002\000\044\023\uffa9\041\uffa9\047\uffa9" +
    "\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\057\uffa9\060\uffa9\062\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\075\uffa9\001\002\000\044\023\uffa7\041\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7" +
    "\057\uffa7\060\uffa7\062\uffa7\066\uffa7\067\uffa7\070\uffa7\075" +
    "\uffa7\001\002\000\004\041\105\001\002\000\044\023\uffc1" +
    "\041\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\062\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\075\uffc1\001\002\000\044\023\uffaa\041" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\062\uffaa\066\uffaa\067" +
    "\uffaa\070\uffaa\075\uffaa\001\002\000\044\023\uff96\041\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055" +
    "\uff96\056\uff96\057\uff96\060\uff96\062\uff96\066\uff96\067\uff96" +
    "\070\uff96\075\uff96\001\002\000\044\023\uffab\041\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\057\uffab\060\uffab\062\uffab\066\uffab\067\uffab\070" +
    "\uffab\075\uffab\001\002\000\044\023\uffc0\041\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\062\uffc0\066\uffc0\067\uffc0\070\uffc0" +
    "\075\uffc0\001\002\000\044\023\uffa8\041\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8" +
    "\057\uffa8\060\uffa8\062\uffa8\066\uffa8\067\uffa8\070\uffa8\075" +
    "\uffa8\001\002\000\044\023\uff95\041\uff95\047\uff95\050\uff95" +
    "\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057" +
    "\uff95\060\uff95\062\uff95\066\uff95\067\uff95\070\uff95\075\uff95" +
    "\001\002\000\016\061\102\063\076\101\072\102\100\103" +
    "\104\105\103\001\002\000\004\023\107\001\002\000\016" +
    "\061\102\063\076\101\072\102\100\103\104\105\103\001" +
    "\002\000\004\066\111\001\002\000\024\013\052\020\071" +
    "\022\060\032\064\036\050\037\054\044\053\067\112\105" +
    "\055\001\002\000\024\013\uffdd\020\uffdd\022\uffdd\032\uffdd" +
    "\036\uffdd\037\uffdd\044\uffdd\067\uffdd\105\uffdd\001\002\000" +
    "\004\067\114\001\002\000\024\013\uffde\020\uffde\022\uffde" +
    "\032\uffde\036\uffde\037\uffde\044\uffde\067\uffde\105\uffde\001" +
    "\002\000\004\067\uffea\001\002\000\004\075\117\001\002" +
    "\000\024\013\uffad\020\uffad\022\uffad\032\uffad\036\uffad\037" +
    "\uffad\044\uffad\067\uffad\105\uffad\001\002\000\004\067\uffe6" +
    "\001\002\000\004\067\uffe8\001\002\000\004\067\uffe0\001" +
    "\002\000\016\053\150\054\152\055\156\056\154\057\153" +
    "\060\151\001\002\000\004\062\171\001\002\000\040\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\062\uffb7\066\uffb7\067\uffb7\070" +
    "\uffb7\075\uffb7\001\002\000\032\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\062\uffd1\066\uffd1\001\002\000\036\047\162\050\161" +
    "\051\164\052\163\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\062\uffb9\066\uffb9\070\uffb9\075\uffb9\001\002" +
    "\000\032\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\062\uffd0\066\uffd0" +
    "\001\002\000\040\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\062\uffb6" +
    "\066\uffb6\067\uffb6\070\uffb6\075\uffb6\001\002\000\034\031" +
    "\136\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\060\uffa8\062\uffd2\066\uffd2\001" +
    "\002\000\020\061\102\063\076\071\133\101\072\102\100" +
    "\103\104\105\103\001\002\000\004\070\135\001\002\000" +
    "\040\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\062\uffb8\066\uffb8\067" +
    "\uffb8\070\uffb8\075\uffb8\001\002\000\006\101\072\105\141" +
    "\001\002\000\022\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\074\uffbf\075\uffbf\001\002\000\016\053\150" +
    "\054\152\055\156\056\154\057\153\060\151\001\002\000" +
    "\012\047\143\050\142\051\145\052\144\001\002\000\004" +
    "\101\uff9a\001\002\000\004\101\uff9b\001\002\000\004\101" +
    "\uff98\001\002\000\004\101\uff99\001\002\000\004\101\072" +
    "\001\002\000\022\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\074\uffbe\075\uffbe\001\002\000\020\061\uffcf" +
    "\063\uffcf\071\uffcf\101\uffcf\102\uffcf\103\uffcf\105\uffcf\001" +
    "\002\000\004\053\160\001\002\000\020\061\uffcd\063\uffcd" +
    "\071\uffcd\101\uffcd\102\uffcd\103\uffcd\105\uffcd\001\002\000" +
    "\020\061\uffca\063\uffca\071\uffca\101\uffca\102\uffca\103\uffca" +
    "\105\uffca\001\002\000\020\061\uffcc\063\uffcc\071\uffcc\101" +
    "\uffcc\102\uffcc\103\uffcc\105\uffcc\001\002\000\020\061\102" +
    "\063\076\071\133\101\072\102\100\103\104\105\103\001" +
    "\002\000\020\061\uffcb\063\uffcb\071\uffcb\101\uffcb\102\uffcb" +
    "\103\uffcb\105\uffcb\001\002\000\006\062\uffd3\066\uffd3\001" +
    "\002\000\020\061\uffce\063\uffce\071\uffce\101\uffce\102\uffce" +
    "\103\uffce\105\uffce\001\002\000\020\061\102\063\076\071" +
    "\133\101\072\102\100\103\104\105\103\001\002\000\020" +
    "\061\102\063\076\071\133\101\072\102\100\103\104\105" +
    "\103\001\002\000\004\101\072\001\002\000\004\101\072" +
    "\001\002\000\040\047\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\062\uffae" +
    "\066\uffae\067\uffae\070\uffae\075\uffae\001\002\000\040\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\062\uffaf\066\uffaf\067\uffaf\070" +
    "\uffaf\075\uffaf\001\002\000\026\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\062\uffbb\066\uffbb\070\uffbb\075" +
    "\uffbb\001\002\000\026\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\062\uffba\066\uffba\070\uffba\075\uffba\001" +
    "\002\000\004\066\172\001\002\000\024\013\052\020\071" +
    "\022\060\032\064\036\050\037\054\044\053\067\173\105" +
    "\055\001\002\000\026\013\uffd9\016\176\020\uffd9\022\uffd9" +
    "\032\uffd9\036\uffd9\037\uffd9\044\uffd9\067\uffd9\105\uffd9\001" +
    "\002\000\004\067\175\001\002\000\026\013\uffdb\016\176" +
    "\020\uffdb\022\uffdb\032\uffdb\036\uffdb\037\uffdb\044\uffdb\067" +
    "\uffdb\105\uffdb\001\002\000\004\066\200\001\002\000\024" +
    "\013\uffdc\020\uffdc\022\uffdc\032\uffdc\036\uffdc\037\uffdc\044" +
    "\uffdc\067\uffdc\105\uffdc\001\002\000\024\013\052\020\071" +
    "\022\060\032\064\036\050\037\054\044\053\067\201\105" +
    "\055\001\002\000\024\013\uffd7\020\uffd7\022\uffd7\032\uffd7" +
    "\036\uffd7\037\uffd7\044\uffd7\067\uffd7\105\uffd7\001\002\000" +
    "\004\067\203\001\002\000\024\013\uffd8\020\uffd8\022\uffd8" +
    "\032\uffd8\036\uffd8\037\uffd8\044\uffd8\067\uffd8\105\uffd8\001" +
    "\002\000\024\013\uffda\020\uffda\022\uffda\032\uffda\036\uffda" +
    "\037\uffda\044\uffda\067\uffda\105\uffda\001\002\000\020\061" +
    "\102\063\076\071\133\101\072\102\100\103\104\105\103" +
    "\001\002\000\006\062\uffd4\066\uffd4\001\002\000\020\015" +
    "\ufff0\021\ufff0\034\ufff0\067\ufff0\077\ufff0\100\ufff0\104\ufff0" +
    "\001\002\000\004\067\uffef\001\002\000\020\061\102\063" +
    "\076\071\133\101\072\102\100\103\104\105\103\001\002" +
    "\000\006\101\072\105\141\001\002\000\006\101\072\105" +
    "\141\001\002\000\004\074\215\001\002\000\006\061\102" +
    "\063\076\001\002\000\004\075\uffc3\001\002\000\004\075" +
    "\uffc2\001\002\000\004\075\uffc4\001\002\000\004\075\230" +
    "\001\002\000\010\051\164\052\163\075\uffb3\001\002\000" +
    "\010\047\225\050\224\075\uffb2\001\002\000\022\013\052" +
    "\061\102\063\076\071\133\101\072\102\100\103\104\105" +
    "\103\001\002\000\022\013\052\061\102\063\076\071\133" +
    "\101\072\102\100\103\104\105\103\001\002\000\004\075" +
    "\uffb1\001\002\000\004\075\uffb0\001\002\000\004\067\uffb5" +
    "\001\002\000\004\066\232\001\002\000\024\013\052\020" +
    "\071\022\060\032\064\036\050\037\054\044\053\067\233" +
    "\105\055\001\002\000\024\013\uffd5\020\uffd5\022\uffd5\032" +
    "\uffd5\036\uffd5\037\uffd5\044\uffd5\067\uffd5\105\uffd5\001\002" +
    "\000\004\067\235\001\002\000\024\013\uffd6\020\uffd6\022" +
    "\uffd6\032\uffd6\036\uffd6\037\uffd6\044\uffd6\067\uffd6\105\uffd6" +
    "\001\002\000\004\045\237\001\002\000\020\061\102\063" +
    "\076\071\133\101\072\102\100\103\104\105\103\001\002" +
    "\000\016\047\uffb4\050\uffb4\051\164\052\163\067\uffb4\075" +
    "\uffb4\001\002\000\024\013\052\020\071\022\060\032\064" +
    "\036\050\037\054\044\053\067\uffe3\105\055\001\002\000" +
    "\004\067\uffe4\001\002\000\004\075\244\001\002\000\024" +
    "\013\uffac\020\uffac\022\uffac\032\uffac\036\uffac\037\uffac\044" +
    "\uffac\067\uffac\105\uffac\001\002\000\004\002\001\001\002" +
    "\000\020\015\ufffe\021\ufffe\034\ufffe\067\ufffe\077\ufffe\100" +
    "\ufffe\104\ufffe\001\002\000\004\066\250\001\002\000\026" +
    "\004\033\005\041\006\037\007\042\010\030\011\035\012" +
    "\252\027\254\067\uffc5\105\055\001\002\000\004\075\302" +
    "\001\002\000\024\004\033\005\041\006\037\007\042\010" +
    "\030\011\035\012\032\027\036\105\uff9d\001\002\000\004" +
    "\067\271\001\002\000\024\004\033\005\041\006\037\007" +
    "\042\010\030\011\035\012\032\027\036\105\uff9c\001\002" +
    "\000\004\105\261\001\002\000\026\004\033\005\041\006" +
    "\037\007\042\010\030\011\035\012\252\027\254\067\uffc5" +
    "\105\055\001\002\000\004\067\uffc6\001\002\000\004\075" +
    "\264\001\002\000\012\024\212\031\213\074\211\075\262" +
    "\001\002\000\026\004\033\005\041\006\037\007\042\010" +
    "\030\011\035\012\252\027\254\067\uffc5\105\055\001\002" +
    "\000\004\067\uffc8\001\002\000\026\004\033\005\041\006" +
    "\037\007\042\010\030\011\035\012\252\027\254\067\uffc5" +
    "\105\055\001\002\000\004\067\uffc9\001\002\000\004\105" +
    "\267\001\002\000\004\075\270\001\002\000\026\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\027" +
    "\uffbc\067\uffbc\105\uffbc\001\002\000\040\013\uffeb\015\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\032\uffeb\034\uffeb\036\uffeb\037" +
    "\uffeb\044\uffeb\067\uffeb\077\uffeb\100\uffeb\104\uffeb\105\uffeb" +
    "\001\002\000\004\105\273\001\002\000\004\040\275\001" +
    "\002\000\004\075\301\001\002\000\006\101\072\105\277" +
    "\001\002\000\004\075\uffa4\001\002\000\004\075\uffa5\001" +
    "\002\000\004\075\uffa6\001\002\000\026\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\027\uffbd\067" +
    "\uffbd\105\uffbd\001\002\000\026\004\033\005\041\006\037" +
    "\007\042\010\030\011\035\012\252\027\254\067\uffc5\105" +
    "\055\001\002\000\004\067\uffc7\001\002\000\004\030\305" +
    "\001\002\000\024\004\033\005\041\006\037\007\042\010" +
    "\030\011\035\012\032\017\031\027\036\001\002\000\004" +
    "\037\307\001\002\000\022\004\033\005\041\006\037\007" +
    "\042\010\030\011\035\012\032\027\036\001\002\000\004" +
    "\066\046\001\002\000\020\015\ufff5\021\ufff5\034\ufff5\067" +
    "\ufff5\077\ufff5\100\ufff5\104\ufff5\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\024\006\023\012\016\013\010\014\022\015\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\245\006\023\013\010\014\022\015\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\033\017\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\044\017" +
    "\037\001\001\000\002\001\001\000\026\006\055\010\056" +
    "\011\064\021\050\023\061\024\066\025\062\026\065\027" +
    "\060\047\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\031\230\033" +
    "\124\034\122\035\130\036\126\041\100\042\076\043\072" +
    "\046\073\001\001\000\024\033\124\035\130\036\221\041" +
    "\100\042\076\043\072\046\073\047\222\050\220\001\001" +
    "\000\002\001\001\000\022\011\207\021\050\023\061\024" +
    "\066\025\062\026\065\027\060\047\067\001\001\000\002" +
    "\001\001\000\024\031\123\033\124\034\122\035\130\036" +
    "\126\041\100\042\076\043\072\046\073\001\001\000\022" +
    "\011\121\021\050\023\061\024\066\025\062\026\065\027" +
    "\060\047\067\001\001\000\022\011\120\021\050\023\061" +
    "\024\066\025\062\026\065\027\060\047\067\001\001\000" +
    "\022\011\117\021\050\023\061\024\066\025\062\026\065" +
    "\027\060\047\067\001\001\000\014\033\115\041\100\042" +
    "\076\043\072\046\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\011\114\021\050\023\061\024\066\025" +
    "\062\026\065\027\060\047\067\001\001\000\002\001\001" +
    "\000\014\033\074\041\100\042\076\043\072\046\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\033\105\041\100\042" +
    "\076\043\072\046\073\001\001\000\002\001\001\000\014" +
    "\033\107\041\100\042\076\043\072\046\073\001\001\000" +
    "\002\001\001\000\022\011\112\021\050\023\061\024\066" +
    "\025\062\026\065\027\060\047\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\033\124\034\133\035\130\036\126\041" +
    "\100\042\076\043\072\046\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\136\045\137\001\001\000" +
    "\002\001\001\000\004\032\154\001\001\000\004\044\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\033\124" +
    "\034\156\035\130\036\126\041\100\042\076\043\072\046" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\033\124\034\167\035\130\036\126\041" +
    "\100\042\076\043\072\046\073\001\001\000\022\033\124" +
    "\034\166\035\130\036\126\041\100\042\076\043\072\046" +
    "\073\001\001\000\004\041\165\001\001\000\004\041\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\011\173" +
    "\021\050\023\061\024\066\025\062\026\065\027\060\047" +
    "\067\001\001\000\004\030\203\001\001\000\002\001\001" +
    "\000\004\030\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\201\021\050\023\061\024\066\025\062" +
    "\026\065\027\060\047\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\033\124\034\205\035\130\036\126\041\100\042\076\043" +
    "\072\046\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\033\124\034\217\035\130\036" +
    "\126\041\100\042\076\043\072\046\073\001\001\000\006" +
    "\041\136\045\216\001\001\000\006\041\136\045\213\001" +
    "\001\000\002\001\001\000\004\046\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\033\124" +
    "\035\130\036\221\041\100\042\076\043\072\046\073\047" +
    "\222\050\226\001\001\000\024\033\124\035\130\036\221" +
    "\041\100\042\076\043\072\046\073\047\222\050\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\011\233\021\050\023\061\024" +
    "\066\025\062\026\065\027\060\047\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\033\124\035\130\036\237\041\100\042\076" +
    "\043\072\046\073\001\001\000\002\001\001\000\022\011" +
    "\241\021\050\023\061\024\066\025\062\026\065\027\060" +
    "\047\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\254\020\252\021\250\022\255\001" +
    "\001\000\002\001\001\000\004\017\271\001\001\000\002" +
    "\001\001\000\004\017\265\001\001\000\004\021\257\001" +
    "\001\000\012\017\254\020\256\021\250\022\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\254\020\262\021\250\022\255\001\001\000\002" +
    "\001\001\000\012\017\254\020\264\021\250\022\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\273\001\001\000\002\001\001\000\006\040\277" +
    "\041\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\254\020\302" +
    "\021\250\022\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\305\017\037\001\001\000\002\001\001" +
    "\000\004\017\307\001\001\000\004\005\310\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // class_def ::= PUBLIC CLASS_DEF IDENTIFIER CODE_BLOCK_START expr_list CODE_BLOCK_END 
            {
              ClassObject RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassObjectBlock o = (ClassObjectBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassObject(o.getGlobalVariables(), o.getMethods(), s);
		   RESULT.fillSymbolTable();
		   RESULT.print();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_def",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= class_def EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassObject start_val = (ClassObject)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_def ::= PUBLIC CLASS_DEF IDENTIFIER CODE_BLOCK_START CODE_BLOCK_END 
            {
              ClassObject RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ClassObject(null, null, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_def",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr_list expr_part 
            {
              ClassObjectBlock RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassObjectBlock c = (ClassObjectBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (o instanceof Method) {
                        c.getMethods().add((Method) o);
                    } else {
                        RESULT.setGlobalVariables((Set<VarStructure>) o);
                    }
                    RESULT = c;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_list ::= expr_part 
            {
              ClassObjectBlock RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ClassObjectBlock();
                if (o instanceof Method) {
                    RESULT.getMethods().add((Method)o);
                } else {
                    RESULT.setGlobalVariables((Set<VarStructure>) o);
                }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_part ::= method 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method o = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_part ::= var_block 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> v = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_part ::= DESTROYER_IDENTIFY 
            {
              Object RESULT =null;
		 System.out.println("Identificador del destructor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_part ::= ERRORS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("->Error léxico: " + s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr_part ::= EXIT 
            {
              Object RESULT =null;
		 System.out.println("-> Fin del programa"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method ::= func 
            {
              Method RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method f = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method ::= proc 
            {
              Method RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method p = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func ::= FUNC IDENTIFIER PARAMS params RETURN var_type method_block 
            {
              Method RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Set<VarStructure> p = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarType vt = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodBlock v = (MethodBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Func(i, p, v.getLocalVariables(), v.getComponents(), MethodType.FUNC, null, vt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proc ::= PROC IDENTIFIER PARAMS params method_block 
            {
              Method RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Set<VarStructure> p = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodBlock v = (MethodBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Method(i, p, v.getLocalVariables(), v.getComponents(), MethodType.PROC, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // params ::= var_type IDENTIFIER COMMA params 
            {
              Set<VarStructure> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarType s = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(new VarDeclaration(DeclarationType.DECLARATION, i, s));
		RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // params ::= var_type IDENTIFIER 
            {
              Set<VarStructure> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarType s = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new HashSet<>();
		RESULT.add(new VarDeclaration(DeclarationType.DECLARATION, i, s));
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // params ::= EMPTY 
            {
              Set<VarStructure> RESULT =null;
		
		RESULT = new HashSet<>();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_block ::= CODE_BLOCK_START method_inst CODE_BLOCK_END 
            {
              MethodBlock RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodBlock m = (MethodBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_inst ::= var_block inst_block 
            {
              MethodBlock RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Set<VarStructure> v = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> i = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodBlock(v, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_inst ::= var_block 
            {
              MethodBlock RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> v = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodBlock(v, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_inst ::= inst_block 
            {
              MethodBlock RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> i = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodBlock(null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method_inst ::= 
            {
              MethodBlock RESULT =null;
		 RESULT = new MethodBlock(null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_block ::= DEFINE VAR CODE_BLOCK_START var_def CODE_BLOCK_END 
            {
              Set<VarStructure> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_block",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inst_block ::= for inst_block 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> c = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(s);
		RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inst_block ::= for 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new LinkedList<>();
		RESULT.add(s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inst_block ::= if inst_block 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> c = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(s);
        RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inst_block ::= if 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new LinkedList<>();
        RESULT.add(s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inst_block ::= while inst_block 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> c = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(s);
        RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inst_block ::= while 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new LinkedList<>();
        RESULT.add(s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inst_block ::= var_assig EOL inst_block 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarAssignment s = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> c = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(new VarAssignmentComponent(ComponentType.ASSIGNMENT, s.getIdentifierName(), s.getAssignment()));
		RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inst_block ::= var_assig EOL 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarAssignment s = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 RESULT = new LinkedList<>();
         RESULT.add(new VarAssignmentComponent(ComponentType.ASSIGNMENT, s.getIdentifierName(), s.getAssignment()));
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inst_block ::= return 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new LinkedList<>();
        RESULT.add(s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inst_block ::= call 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new LinkedList<>();
        RESULT.add((Component)s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inst_block ::= io_oper inst_block 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Component> c = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(s);
        RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inst_block ::= io_oper 
            {
              List<Component> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component s = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new LinkedList<>();
        RESULT.add(s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for ::= FOR term TO term INCREASE term CODE_BLOCK_START inst_block CODE_BLOCK_END 
            {
              Component RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Component> i = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		Assignment actual, maxValue, stripe;

		if(n1 instanceof Float) {
		    actual = new ValueAssignment<Integer>(Math.round((Float)n1));
		} else {
		    actual = (IdentifierAssignment)n1;
		}

		if(n2 instanceof Float) {
            maxValue = new ValueAssignment<Integer>(Math.round((Float)n2));
        } else {
            maxValue = (IdentifierAssignment)n2;
        }

        if(n3 instanceof Float) {
            stripe = new ValueAssignment<Integer>(Math.round((Float)n3));
        } else {
            stripe = (IdentifierAssignment)n3;
        }

		RESULT = new For(ComponentType.FOR, i, maxValue, stripe, actual);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for ::= FOR term TO term INCREASE term CODE_BLOCK_START CODE_BLOCK_END 
            {
              Component RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

		Assignment actual, maxValue, stripe;

        if(n1 instanceof Float) {
            actual = new ValueAssignment<Integer>(Math.round((Float)n1));
        } else {
            actual = (IdentifierAssignment)n1;
        }

        if(n2 instanceof Float) {
               maxValue = new ValueAssignment<Integer>(Math.round((Float)n2));
        } else {
               maxValue = (IdentifierAssignment)n2;
        }

        if(n3 instanceof Float) {
              stripe = new ValueAssignment<Integer>(Math.round((Float)n3));
        } else {
              stripe = (IdentifierAssignment)n3;
        }

        RESULT = new For(ComponentType.FOR, null, maxValue, stripe, actual);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if ::= IF conditional THEN CODE_BLOCK_START inst_block CODE_BLOCK_END else 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Component> i = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component e = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(ComponentType.IF, i, c, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if ::= IF conditional THEN CODE_BLOCK_START inst_block CODE_BLOCK_END 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Component> i = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(ComponentType.IF, i, c, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if ::= IF conditional THEN CODE_BLOCK_START CODE_BLOCK_END else 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Component e = (Component)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(ComponentType.IF, null, c, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if ::= IF conditional THEN CODE_BLOCK_START CODE_BLOCK_END 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new If(ComponentType.IF, null, c, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // else ::= ELSE CODE_BLOCK_START inst_block CODE_BLOCK_END 
            {
              Component RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Component> s = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Else(ComponentType.ELSE, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // else ::= ELSE CODE_BLOCK_START CODE_BLOCK_END 
            {
              Component RESULT =null;
		 RESULT = new Else(ComponentType.ELSE, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // while ::= WHILE conditional CODE_BLOCK_START inst_block CODE_BLOCK_END 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Component> s = (List<Component>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(ComponentType.WHILE, s, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // while ::= WHILE conditional CODE_BLOCK_START CODE_BLOCK_END 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new While(ComponentType.WHILE, null, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // conditional ::= math_expr cond_type math_expr 
            {
              Condition RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ComparatorType c = (ComparatorType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Condition(s, v, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // conditional ::= IDENTIFIER POS index cond_type math_expr 
            {
              Condition RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ComparatorType c = (ComparatorType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Condition(new IdentifierAssignment(i), v, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // conditional ::= IDENTIFIER 
            {
              Condition RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Condition(new IdentifierAssignment(i), new ValueAssignment<Boolean>(true), ComparatorType.EQUALS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // conditional ::= TRUE 
            {
              Condition RESULT =null;
		 RESULT = new Condition(new ValueAssignment<Boolean>(true), new ValueAssignment<Boolean>(true), ComparatorType.EQUALS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conditional ::= FALSE 
            {
              Condition RESULT =null;
		 RESULT = new Condition(new ValueAssignment<Boolean>(false), new ValueAssignment<Boolean>(false), ComparatorType.EQUALS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond_type ::= EQUALS 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.EQUALS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond_type ::= NOT EQUALS 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.NOT_EQUALS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond_type ::= GREATER_THAN 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.GREATER_THAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cond_type ::= SMALLER_THAN 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.LESS_THAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cond_type ::= GREATER_THAN_EQUALS 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.GREATER_THAN_EQUALS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cond_type ::= SMALLER_THAN_EQUALS 
            {
              ComparatorType RESULT =null;
		 RESULT = ComparatorType.LESS_THAN_EQUALS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var_def ::= var_type var_assig EOL var_def 
            {
              Set<VarStructure> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarType s = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarAssignment v = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(new VarDeclarationAssignment(DeclarationType.DECLARATION_ASSIGNMENT, v.getIdentifierName(), s, v));
		RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // var_def ::= var_type IDENTIFIER EOL var_def 
            {
              Set<VarStructure> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarType s = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 c.add(new VarDeclaration(DeclarationType.DECLARATION, i, s));
         RESULT = c;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var_def ::= var_assig EOL var_def 
            {
              Set<VarStructure> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarAssignment v = (VarAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        c.add(new VarAssignment(DeclarationType.ASSIGNMENT, v.getIdentifierName(), v));
        RESULT = c;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var_def ::= array_def var_def 
            {
              Set<VarStructure> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarStructure s = (VarStructure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<VarStructure> c = (Set<VarStructure>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		c.add(s);
		RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var_def ::= 
            {
              Set<VarStructure> RESULT =null;
		
        RESULT = new LinkedHashSet<VarStructure>();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_def",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // var_assig ::= IDENTIFIER ASSIGNMENT math_expr 
            {
              VarAssignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarAssignment(DeclarationType.ASSIGNMENT, i, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // var_assig ::= IDENTIFIER POS index ASSIGNMENT tof 
            {
              VarAssignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueAssignment<Boolean> s = (ValueAssignment<Boolean>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarAssignment(DeclarationType.ASSIGNMENT, i, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var_assig ::= IDENTIFIER INSERT index 
            {
              VarAssignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VarAssignment(DeclarationType.ASSIGNMENT, i, new ValueAssignment<String>("Array:insert")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_assig",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tof ::= TRUE 
            {
              ValueAssignment<Boolean> RESULT =null;
		 RESULT = new ValueAssignment<Boolean>(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tof",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tof ::= FALSE 
            {
              ValueAssignment<Boolean> RESULT =null;
		 RESULT = new ValueAssignment<Boolean>(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tof",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // index ::= num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // index ::= IDENTIFIER math_sym num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // array_def ::= ARRAY var_type IDENTIFIER array_size EOL 
            {
              VarStructure RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarType v = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclaration(DeclarationType.DECLARATION, i, VarType.ARRAY); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_def",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // array_def ::= LIST var_type IDENTIFIER EOL 
            {
              VarStructure RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarType v = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclaration(DeclarationType.DECLARATION, i, VarType.LIST); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_def",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // math_expr ::= math_part SUM math_expr 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sum(s, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // math_expr ::= math_part SUBTRACTION math_expr 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(s, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // math_expr ::= math_part 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // math_part ::= PARENTHESIS_LEFT math_expr PARENTHESIS_RIGHT 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MathAux(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_part",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // math_part ::= term 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(s instanceof IdentifierAssignment) {
		    RESULT = (IdentifierAssignment)s;
		} else if(s instanceof String) {
		    RESULT = new ValueAssignment<String>((String)s);
		} else if(s instanceof Double) {
		    RESULT = new ValueAssignment<Double>((Double)s);
		}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_part",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // math_part ::= factor 
            {
              Assignment RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment f = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_part",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // return ::= RETURN return_exp EOL 
            {
              Component RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Return(ComponentType.RETURN, s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // call ::= CALL IDENTIFIER WITH math_part 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment m = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		    RESULT = new Call(ComponentType.CALL, m, s);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // return_exp ::= math_part 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_exp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // return_exp ::= call 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_exp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // return_exp ::= call SUM return_exp 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sum(s, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_exp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // return_exp ::= call SUBTRACTION return_exp 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment v = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(s, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_exp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= math_part MULTIPLICATION num 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 if(!(v instanceof Double)) throw new Exception("Can't parse " + v + " to Double.");
         		RESULT =  new Mul((Assignment)s, new ValueAssignment<Double>((Double)v));
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= math_part DIVISION num 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment s = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(!(v instanceof Double)) throw new Exception("Can't parse " + v + " to Double.");
		RESULT =  new Div((Assignment)s, new ValueAssignment<Double>((Double)v));
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // io_oper ::= PRINT term EOL 
            {
              Component RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		    if(s instanceof String) {
		        ValueAssignment<String> value = new ValueAssignment<String>((String) s);
		        RESULT = new Print(ComponentType.PRINT, value);
		    } else if(s instanceof IdentifierAssignment) {
		        RESULT = new Print(ComponentType.PRINT, (IdentifierAssignment)s);
		    } else {
		        RESULT = new Print(ComponentType.PRINT, new ValueAssignment<String>((String) s));
		    }
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_oper",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // io_oper ::= READ IDENTIFIER EOL 
            {
              Component RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Read(ComponentType.READ, new IdentifierAssignment(s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_oper",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // term ::= num 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // term ::= quote_marks 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // term ::= simple_quote 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // term ::= IDENTIFIER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierAssignment(s.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // term ::= tof 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // array_size ::= SIZE num_iden 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // array_size ::= SIZE IDENTIFIER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // num_iden ::= num 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num_iden",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // var_type ::= BOOLEAN 
            {
              VarType RESULT =null;
		 RESULT = VarType.BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // var_type ::= CHAR 
            {
              VarType RESULT =null;
		 RESULT = VarType.CHAR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // var_type ::= DOUBLE 
            {
              VarType RESULT =null;
		 RESULT = VarType.DOUBLE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // var_type ::= FLOAT 
            {
              VarType RESULT =null;
		 RESULT = VarType.FLOAT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // var_type ::= INT 
            {
              VarType RESULT =null;
		 RESULT = VarType.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // var_type ::= STRING 
            {
              VarType RESULT =null;
		 RESULT = VarType.STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // var_type ::= ARRAY 
            {
              VarType RESULT =null;
		 RESULT = VarType.ARRAY; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // var_type ::= LIST 
            {
              VarType RESULT =null;
		 RESULT = VarType.LIST; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // math_sym ::= SUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_sym",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // math_sym ::= SUBTRACTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_sym",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // math_sym ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_sym",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // math_sym ::= MULTIPLICATION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_sym",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // num ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // quote_marks ::= QUOTATION_MARKS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quote_marks",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // simple_quote ::= SIMPLE_QUOTATION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_quote",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
